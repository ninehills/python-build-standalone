on:
  push:
  pull_request:
  schedule:
    - cron: '13 11 * * *'
jobs:
  pythonbuild:
    runs-on: ubuntu-22.04
    steps:
      - name: Install System Dependencies
        run: |
          sudo apt update
          sudo apt install -y --no-install-recommends libssl-dev pkg-config

      - uses: actions/checkout@v3

      - name: Install Rust
        uses: dtolnay/rust-toolchain@v1
        with:
          toolchain: stable

      - name: Emit rustc version
        run: |
          rustc --version > .rustc-version

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-pythonbuild-${{ hashFiles('Cargo.lock', '.rustc-version') }}

      - name: Build
        run: |
          cargo build --release

      - name: Upload pythonbuild Executable
        uses: actions/upload-artifact@v3
        with:
          name: pythonbuild
          path: target/release/pythonbuild

  image:
    strategy:
      fail-fast: false
      matrix:
        image:
          - build
          - build.cross
          - gcc
          - xcb
          - xcb.cross
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Build Image
        run: |
          ./build-linux.py --make-target toolchain-image-${{ matrix.image }}
          zstd -v -T0 -6 --rm build/image-*.tar

      - name: Upload Docker Image
        uses: actions/upload-artifact@v3
        with:
          name: images
          path: build/image-*

  build:
    strategy:
      fail-fast: false
      matrix:
        build:
          # Cross-compiles can't do PGO and require Python 3.9.
          - target_triple: 'ppc64le-unknown-linux-gnu'
            py: 'cpython-3.9'
            optimizations: 'debug'
          - target_triple: 'ppc64le-unknown-linux-gnu'
            py: 'cpython-3.9'
            optimizations: 'noopt'
          - target_triple: 'ppc64le-unknown-linux-gnu'
            py: 'cpython-3.9'
            optimizations: 'lto'

          - target_triple: 'ppc64le-unknown-linux-gnu'
            py: 'cpython-3.10'
            optimizations: 'debug'
          - target_triple: 'ppc64le-unknown-linux-gnu'
            py: 'cpython-3.10'
            optimizations: 'noopt'
          - target_triple: 'ppc64le-unknown-linux-gnu'
            py: 'cpython-3.10'
            optimizations: 'lto'

          - target_triple: 'ppc64le-unknown-linux-gnu'
            py: 'cpython-3.11'
            optimizations: 'debug'
          - target_triple: 'ppc64le-unknown-linux-gnu'
            py: 'cpython-3.11'
            optimizations: 'noopt'
          - target_triple: 'ppc64le-unknown-linux-gnu'
            py: 'cpython-3.11'
            optimizations: 'lto'

    needs:
      - pythonbuild
      - image
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Download pythonbuild
        uses: actions/download-artifact@v3
        with:
          name: pythonbuild
          path: build

      - name: Download images
        uses: actions/download-artifact@v3
        with:
          name: images
          path: build

      - name: Load Docker Images
        run: |
          for f in build/image-*.tar.zst; do
            echo "decompressing $f"
            zstd -d --rm ${f}
          done

          for f in build/image-*.tar; do
            echo "loading $f"
            docker load --input $f
          done

      - name: Build
        run: |
          # Do empty target so all generated files are touched.
          ./build-linux.py --make-target empty

          # Touch mtimes of all images so they are newer than autogenerated files above.
          touch build/image-*

          ./build-linux.py --target-triple ${{ matrix.build.target_triple }} --python ${{ matrix.build.py }} --optimizations ${{ matrix.build.optimizations }}

      - name: Validate Distribution
        run: |
          chmod +x build/pythonbuild

          if [ -n "${{matrix.build.run}}" ]; then
            EXTRA_ARGS="--run"
          fi

          build/pythonbuild validate-distribution ${EXTRA_ARGS} dist/*.tar.zst

      - name: Upload Distribution
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.build.py }}-${{ matrix.build.target_triple }}
          path: dist/*
